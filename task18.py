#Задача 1. Известно, что генеральная совокупность распределена нормально
#со средним квадратическим отклонением, равным 16.
#Найти доверительный интервал для оценки математического ожидания a с надежностью
#0.95,
#если выборочная средняя M = 80, а объем выборки n = 256.

import pandas as pd
import numpy as np
from statsmodels.stats.weightstats import _tconfint_generic as t_stat
from scipy.stats import norm 
import math


mean_std = np.sqrt(16) / 256
print( mean_std )

left=80-1.96*16/256**(1/2)
right=80+1.96*16/256**(1/2)
print(f'95%-й доверительный интервал для оценки мат. ожидания генеральной совокупности: [{left};{right}].')


#2. В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью, получены опытные 
#данные: 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1 Предполагая, что результаты измерений подчинены нормальному
#закону распределения вероятностей, оценить истинное значение величины X при помощи доверительного интервала, 
#покрывающего это значение с доверительной вероятностью 0,95.

import numpy as np
import scipy.stats as stats

#Для расчета 95%-го доверительного интервала будем использовать t-критерий

arr=np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
print(f'Среднее выборочное: {np.mean(arr): .2f},\n'
      f'Размер выборки n={len(arr)},\n'
      f'СКО  по выборке(несмещенное): {np.std(arr, ddof=1): .2f}.'
     )

def t_from_table(confidens, len_array):
    alpha=(1-confidens)
    return stats.t.ppf(1-alpha/2, len_array-1)
print(f'Таб. знач-е t-критерия для 95%-го доверит. интервала выборки: {t_from_table(0.95, len(arr)): .3f}')

#расчета доверительного интервала:

def confidens_int(arr, confidens):
    return round(np.mean(arr)-t_from_table(confidens,len(arr))*np.std(arr, ddof=1)/len(arr)**0.5,3), \
           round(np.mean(arr)+t_from_table(confidens,len(arr))*np.std(arr, ddof=1)/len(arr)**0.5,3)

print(f'95%-й доверит. интервал для истин. значения Х: {confidens_int(arr, 0.95)}.')


#Задача 3. Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170
#Рост матерей 178, 165, 165, 173, 168, 155, 160, 164, 178, 175
#Используя эти данные построить 95% доверительный интервал для разности среднего
#роста родителей и детей.

import numpy as np

a = np.array([178, 165, 165, 173, 168, 155, 160, 164, 178, 175])
b = np.array([175, 167, 154, 174, 178, 148, 160, 167, 169, 170])


len(a)
10

len(b)
10

x_1 = np.mean(a)
print("Среднее арифметическое 2" ,x_1)

x_2 = np.mean(b)
print("Среднее арифметическое 1", x_2)

delta = x_1 - x_2
print("Разность средних", delta)

#Несмещенная дисперсия для выборки 1
D1 = np.var (a,ddof =1)
print("Несмещенная дисперия для выборки 1", D1)

#Несмещенная дисперсия для выборки 2
D2 = np.var (b,ddof =2)
print("Несмещенная дисперсия для выборки 2", D2)

#Оценка дисперсии
D = (D1 + D2)/2
print("Оценка дисперсии", D)

#Стандартная ошибка разности
SE = np.sqrt(D/10 +D/10)
print("Стандартная ошибка разности", SE)

import scipy.stats as stats
t = stats.t.ppf(0.975, 18)
print("Доверительный интервал для среднего", t)

#Находим нижнюю границу интервала
L = delta - t*SE
print("Находим нижнюю границу интервала", L )

#Находим верхнюю границу интервала
U = delta + t*SE
print("Находим нижнюю границу интервала", U)












